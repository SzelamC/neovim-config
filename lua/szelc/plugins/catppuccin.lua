local status, catppuccin = pcall(require, "catppuccin")
if not status then
	return
end

-- catppuccin.setup({})

catppuccin.setup({
	flavour = "mocha", -- Can be one of: latte, frappe, macchiato, mocha
	term_colors = true,
	compile_path = vim.fn.stdpath("cache") .. "/catppuccin",
	integrations = {
		treesitter = true,
		native_lsp = {
			enabled = true,
			virtual_text = {
				errors = {},
				hints = {},
				warnings = {},
				information = {},
			},
			underlines = {
				errors = { "underline" },
				hints = { "underline" },
				warnings = { "underline" },
				information = { "underline" },
			},
		},
		lsp_saga = true,
		gitsigns = true,
		telescope = true,
		nvimtree = true,
		indent_blankline = { enabled = true, colored_indent_levels = false },
		ts_rainbow = true,
		mason = true,
		cmp = true,
		fidget = true,
	},
	custom_highlights = function(C)
		return {
			CmpItemKindSnippet = { fg = C.base, bg = C.mauve },
			CmpItemKindKeyword = { fg = C.base, bg = C.red },
			CmpItemKindText = { fg = C.base, bg = C.teal },
			CmpItemKindMethod = { fg = C.base, bg = C.blue },
			CmpItemKindConstructor = { fg = C.base, bg = C.blue },
			CmpItemKindFunction = { fg = C.base, bg = C.blue },
			CmpItemKindFolder = { fg = C.base, bg = C.blue },
			CmpItemKindModule = { fg = C.base, bg = C.blue },
			CmpItemKindConstant = { fg = C.base, bg = C.peach },
			CmpItemKindField = { fg = C.base, bg = C.green },
			CmpItemKindProperty = { fg = C.base, bg = C.green },
			CmpItemKindEnum = { fg = C.base, bg = C.green },
			CmpItemKindUnit = { fg = C.base, bg = C.green },
			CmpItemKindClass = { fg = C.base, bg = C.yellow },
			CmpItemKindVariable = { fg = C.base, bg = C.flamingo },
			CmpItemKindFile = { fg = C.base, bg = C.blue },
			CmpItemKindInterface = { fg = C.base, bg = C.yellow },
			CmpItemKindColor = { fg = C.base, bg = C.red },
			CmpItemKindReference = { fg = C.base, bg = C.red },
			CmpItemKindEnumMember = { fg = C.base, bg = C.red },
			CmpItemKindStruct = { fg = C.base, bg = C.blue },
			CmpItemKindValue = { fg = C.base, bg = C.peach },
			CmpItemKindEvent = { fg = C.base, bg = C.blue },
			CmpItemKindOperator = { fg = C.base, bg = C.blue },
			CmpItemKindTypeParameter = { fg = C.base, bg = C.blue },
			CmpItemKindCopilot = { fg = C.base, bg = C.teal },
			MatchParen = { fg = C.base, bg ="#545454" },
			-- For base configs.
			CursorLineNr = { fg = C.green },
			Search = { bg = C.surface1, fg = C.pink, style = { "bold" } },
			IncSearch = { bg = C.pink, fg = C.surface1 },
			-- For native lsp configs.
			DiagnosticVirtualTextError = { bg = C.none },
			DiagnosticVirtualTextWarn = { bg = C.none },
			DiagnosticVirtualTextInfo = { bg = C.none },
			DiagnosticVirtualTextHint = { fg = C.rosewater, bg = C.none },
			DiagnosticHint = { fg = C.rosewater },
			LspDiagnosticsDefaultHint = { fg = C.rosewater },
			LspDiagnosticsHint = { fg = C.rosewater },
			LspDiagnosticsVirtualTextHint = { fg = C.rosewater },
			LspDiagnosticsUnderlineHint = { sp = C.rosewater },
			-- For fidget.
			FidgetTask = { bg = C.none, fg = C.surface2 },
			FidgetTitle = { fg = C.blue, style = { "bold" } },
			-- For treesitter.
			["@field"] = { fg = C.rosewater },
			["@property"] = { fg = C.yellow },
			["@include"] = { fg = C.teal, style = { "bold" } },
			["@operator"] = { fg = C.sky },
			["@keyword.operator"] = { fg = C.sky },
			["@punctuation.special"] = { fg = C.maroon },
			-- ["@float"] = { fg = C.peach },
			-- ["@number"] = { fg = C.peach },
			-- ["@boolean"] = { fg = C.peach },

			["@constructor"] = { fg = C.lavender },
			-- ["@constant"] = { fg = C.peach },
			-- ["@conditional"] = { fg = C.mauve },
			-- ["@repeat"] = { fg = C.mauve },
			["@exception"] = { fg = C.peach },
			["@constant.builtin"] = { fg = C.lavender },
			["@function.builtin"] = { fg = C.peach, style = {} },
			["@type.builtin"] = { fg = C.peach, style = {} },
			["@variable.builtin"] = { fg = C.red, style = {} },
			-- ["@function"] = { fg = C.blue },
			["@function.macro"] = { fg = C.red, style = {} },
			["@parameter"] = { fg = C.rosewater, style = {} },
			["@keyword.function"] = { fg = C.maroon },
			["@keyword"] = { fg = C.red },
			["@keyword.return"] = { fg = C.pink, style = {} },
			-- ["@text.note"] = { fg = C.base, bg = cp.blue },
			-- ["@text.warning"] = { fg = C.base, bg = cp.yellow },
			-- ["@text.danger"] = { fg = C.base, bg = cp.red },
			-- ["@constant.macro"] = { fg = C.mauve },

			-- ["@label"] = { fg = C.blue },
			["@method"] = { style = {} },
			["@namespace"] = { fg = C.rosewater, style = {} },
			["@punctuation.delimiter"] = { fg = C.teal },
			["@punctuation.bracket"] = { fg = C.overlay2 },
			-- ["@string"] = { fg = C.green },
			-- ["@string.regex"] = { fg = C.peach },
			["@type"] = { fg = C.peach },
			["@variable"] = { fg = C.blue, style = {} },
			-- ["@tag.attribute"] = { fg = C.mauve, style = { "italic" } },
			["@tag"] = { fg = C.peach },
			["@tag.delimiter"] = { fg = C.maroon },
			["@text"] = { fg = C.text },
			-- ["@text.uri"] = { fg = C.rosewater, style = { "italic", "underline" } },
			-- ["@text.literal"] = { fg = C.teal, style = { "italic" } },
			-- ["@text.reference"] = { fg = C.lavender, style = { "bold" } },
			-- ["@text.title"] = { fg = C.blue, style = { "bold" } },
			-- ["@text.emphasis"] = { fg = C.maroon, style = { "italic" } },
			-- ["@text.strong"] = { fg = C.maroon, style = { "bold" } },
			-- ["@string.escape"] = { fg = C.pink },

			-- ["@property.toml"] = { fg = C.blue },
			-- ["@field.yaml"] = { fg = C.blue },

			-- ["@label.json"] = { fg = C.blue },

			["@function.builtin.bash"] = { fg = C.red, style = {} },
			["@parameter.bash"] = { fg = C.yellow, style = {} },
			["@field.lua"] = { fg = C.lavender },
			["@constructor.lua"] = { fg = C.flamingo },
			["@constant.java"] = { fg = C.teal },
			["@property.typescript"] = { fg = C.lavender, style = {} },
			["@constructor.typescript"] = { fg = C.lavender },
			["@constructor.tsx"] = { fg = C.lavender },
			["@tag.attribute.tsx"] = { fg = C.lavender, style = {} },
			["@type.css"] = { fg = C.lavender },
			["@property.css"] = { fg = C.yellow, style = {} },
			["@property.cpp"] = { fg = C.text },
			["@symbol"] = { fg = C.flamingo },
		}
	end,
})
